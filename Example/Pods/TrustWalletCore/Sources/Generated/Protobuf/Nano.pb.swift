// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Nano.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Input data necessary to create a signed transaction.
public struct TW_Nano_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The secret private key used for signing (32 bytes).
  public var privateKey: Data = Data()

  /// Optional parent block hash
  public var parentBlock: Data = Data()

  /// Receive/Send reference
  public var linkOneof: TW_Nano_Proto_SigningInput.OneOf_LinkOneof? = nil

  /// Hash of a block to receive from
  public var linkBlock: Data {
    get {
      if case .linkBlock(let v)? = linkOneof {return v}
      return Data()
    }
    set {linkOneof = .linkBlock(newValue)}
  }

  /// Recipient address to send coins to
  public var linkRecipient: String {
    get {
      if case .linkRecipient(let v)? = linkOneof {return v}
      return String()
    }
    set {linkOneof = .linkRecipient(newValue)}
  }

  /// Representative address
  public var representative: String = String()

  /// Account balance (128-bit unsigned integer, as a string)
  public var balance: String = String()

  /// Work
  public var work: String = String()

  /// Pulic key used for building preImage (32 bytes).
  public var publicKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Receive/Send reference
  public enum OneOf_LinkOneof: Equatable {
    /// Hash of a block to receive from
    case linkBlock(Data)
    /// Recipient address to send coins to
    case linkRecipient(String)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Nano_Proto_SigningInput.OneOf_LinkOneof, rhs: TW_Nano_Proto_SigningInput.OneOf_LinkOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.linkBlock, .linkBlock): return {
        guard case .linkBlock(let l) = lhs, case .linkBlock(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.linkRecipient, .linkRecipient): return {
        guard case .linkRecipient(let l) = lhs, case .linkRecipient(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Result containing the signed and encoded transaction.
public struct TW_Nano_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signature
  public var signature: Data = Data()

  /// Block hash
  public var blockHash: Data = Data()

  /// JSON representation of the block
  public var json: String = String()

  /// error code, 0 is ok, other codes will be treated as errors
  public var error: TW_Common_Proto_SigningError = .ok

  /// error code description
  public var errorMessage: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Nano.Proto"

extension TW_Nano_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "private_key"),
    2: .standard(proto: "parent_block"),
    3: .standard(proto: "link_block"),
    4: .standard(proto: "link_recipient"),
    5: .same(proto: "representative"),
    6: .same(proto: "balance"),
    7: .same(proto: "work"),
    8: .standard(proto: "public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.parentBlock) }()
      case 3: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.linkOneof != nil {try decoder.handleConflictingOneOf()}
          self.linkOneof = .linkBlock(v)
        }
      }()
      case 4: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.linkOneof != nil {try decoder.handleConflictingOneOf()}
          self.linkOneof = .linkRecipient(v)
        }
      }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.representative) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.balance) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.work) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 1)
    }
    if !self.parentBlock.isEmpty {
      try visitor.visitSingularBytesField(value: self.parentBlock, fieldNumber: 2)
    }
    switch self.linkOneof {
    case .linkBlock?: try {
      guard case .linkBlock(let v)? = self.linkOneof else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }()
    case .linkRecipient?: try {
      guard case .linkRecipient(let v)? = self.linkOneof else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    if !self.representative.isEmpty {
      try visitor.visitSingularStringField(value: self.representative, fieldNumber: 5)
    }
    if !self.balance.isEmpty {
      try visitor.visitSingularStringField(value: self.balance, fieldNumber: 6)
    }
    if !self.work.isEmpty {
      try visitor.visitSingularStringField(value: self.work, fieldNumber: 7)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Nano_Proto_SigningInput, rhs: TW_Nano_Proto_SigningInput) -> Bool {
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.parentBlock != rhs.parentBlock {return false}
    if lhs.linkOneof != rhs.linkOneof {return false}
    if lhs.representative != rhs.representative {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.work != rhs.work {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Nano_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .standard(proto: "block_hash"),
    3: .same(proto: "json"),
    4: .same(proto: "error"),
    5: .standard(proto: "error_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.blockHash) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.json) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.error) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 1)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockHash, fieldNumber: 2)
    }
    if !self.json.isEmpty {
      try visitor.visitSingularStringField(value: self.json, fieldNumber: 3)
    }
    if self.error != .ok {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 4)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Nano_Proto_SigningOutput, rhs: TW_Nano_Proto_SigningOutput) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.blockHash != rhs.blockHash {return false}
    if lhs.json != rhs.json {return false}
    if lhs.error != rhs.error {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
