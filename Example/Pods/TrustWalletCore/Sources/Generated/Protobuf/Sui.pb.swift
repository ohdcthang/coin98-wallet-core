// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Sui.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Object info (including Coins).
public struct TW_Sui_Proto_ObjectRef {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hex string representing the object ID.
  public var objectID: String = String()

  /// Object version.
  public var version: UInt64 = 0

  /// Base58 string representing the object digest.
  public var objectDigest: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Optional amount.
public struct TW_Sui_Proto_Amount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amount: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Base64 encoded msg to sign (string)
public struct TW_Sui_Proto_SignDirect {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Obtain by calling any write RpcJson on SUI
  public var unsignedTxMsg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Send `Coin<T>` to a list of addresses, where T can be any coin type, following a list of amounts.
/// The object specified in the gas field will be used to pay the gas fee for the transaction.
/// The gas object can not appear in input_coins.
/// https://docs.sui.io/sui-api-ref#unsafe_pay
public struct TW_Sui_Proto_Pay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Sui coins to be used in this transaction, including the coin for gas payment.
  public var inputCoins: [TW_Sui_Proto_ObjectRef] = []

  /// The recipients' addresses, the length of this vector must be the same as amounts.
  public var recipients: [String] = []

  /// The amounts to be transferred to recipients, following the same order.
  public var amounts: [UInt64] = []

  /// Gas object to be used in this transaction.
  public var gas: TW_Sui_Proto_ObjectRef {
    get {return _gas ?? TW_Sui_Proto_ObjectRef()}
    set {_gas = newValue}
  }
  /// Returns true if `gas` has been explicitly set.
  public var hasGas: Bool {return self._gas != nil}
  /// Clears the value of `gas`. Subsequent reads from it will return its default value.
  public mutating func clearGas() {self._gas = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gas: TW_Sui_Proto_ObjectRef? = nil
}

/// Send SUI coins to a list of addresses, following a list of amounts.
/// This is for SUI coin only and does not require a separate gas coin object.
/// https://docs.sui.io/sui-api-ref#unsafe_paysui
public struct TW_Sui_Proto_PaySui {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Sui coins to be used in this transaction, including the coin for gas payment.
  public var inputCoins: [TW_Sui_Proto_ObjectRef] = []

  /// The recipients' addresses, the length of this vector must be the same as amounts.
  public var recipients: [String] = []

  /// The amounts to be transferred to recipients, following the same order.
  public var amounts: [UInt64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Send all SUI coins to one recipient.
/// This is for SUI coin only and does not require a separate gas coin object.
/// https://docs.sui.io/sui-api-ref#unsafe_payallsui
public struct TW_Sui_Proto_PayAllSui {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The Sui coins to be used in this transaction, including the coin for gas payment.
  public var inputCoins: [TW_Sui_Proto_ObjectRef] = []

  /// The recipient address.
  public var recipient: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Add stake to a validator's staking pool using multiple coins and amount.
/// https://docs.sui.io/sui-api-ref#unsafe_requestaddstake
public struct TW_Sui_Proto_RequestAddStake {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Coin<SUI> objects to stake.
  public var coins: [TW_Sui_Proto_ObjectRef] = []

  /// Optional stake amount.
  public var amount: TW_Sui_Proto_Amount {
    get {return _amount ?? TW_Sui_Proto_Amount()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() {self._amount = nil}

  /// The validator's Sui address.
  public var validator: String = String()

  /// Gas object to be used in this transaction.
  public var gas: TW_Sui_Proto_ObjectRef {
    get {return _gas ?? TW_Sui_Proto_ObjectRef()}
    set {_gas = newValue}
  }
  /// Returns true if `gas` has been explicitly set.
  public var hasGas: Bool {return self._gas != nil}
  /// Clears the value of `gas`. Subsequent reads from it will return its default value.
  public mutating func clearGas() {self._gas = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _amount: TW_Sui_Proto_Amount? = nil
  fileprivate var _gas: TW_Sui_Proto_ObjectRef? = nil
}

/// Withdraw stake from a validator's staking pool.
/// https://docs.sui.io/sui-api-ref#unsafe_requestwithdrawstake
public struct TW_Sui_Proto_RequestWithdrawStake {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// StakedSui object ID.
  public var stakedSui: TW_Sui_Proto_ObjectRef {
    get {return _stakedSui ?? TW_Sui_Proto_ObjectRef()}
    set {_stakedSui = newValue}
  }
  /// Returns true if `stakedSui` has been explicitly set.
  public var hasStakedSui: Bool {return self._stakedSui != nil}
  /// Clears the value of `stakedSui`. Subsequent reads from it will return its default value.
  public mutating func clearStakedSui() {self._stakedSui = nil}

  /// Gas object to be used in this transaction.
  public var gas: TW_Sui_Proto_ObjectRef {
    get {return _gas ?? TW_Sui_Proto_ObjectRef()}
    set {_gas = newValue}
  }
  /// Returns true if `gas` has been explicitly set.
  public var hasGas: Bool {return self._gas != nil}
  /// Clears the value of `gas`. Subsequent reads from it will return its default value.
  public mutating func clearGas() {self._gas = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stakedSui: TW_Sui_Proto_ObjectRef? = nil
  fileprivate var _gas: TW_Sui_Proto_ObjectRef? = nil
}

//// Transfer an object from one address to another. The object's type must allow public transfers.
//// https://docs.sui.io/sui-api-ref#unsafe_transferobject
public struct TW_Sui_Proto_TransferObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Object ID to be transferred.
  public var object: TW_Sui_Proto_ObjectRef {
    get {return _object ?? TW_Sui_Proto_ObjectRef()}
    set {_object = newValue}
  }
  /// Returns true if `object` has been explicitly set.
  public var hasObject: Bool {return self._object != nil}
  /// Clears the value of `object`. Subsequent reads from it will return its default value.
  public mutating func clearObject() {self._object = nil}

  /// The recipient address.
  public var recipient: String = String()

  /// Gas object to be used in this transaction.
  public var gas: TW_Sui_Proto_ObjectRef {
    get {return _gas ?? TW_Sui_Proto_ObjectRef()}
    set {_gas = newValue}
  }
  /// Returns true if `gas` has been explicitly set.
  public var hasGas: Bool {return self._gas != nil}
  /// Clears the value of `gas`. Subsequent reads from it will return its default value.
  public mutating func clearGas() {self._gas = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _object: TW_Sui_Proto_ObjectRef? = nil
  fileprivate var _gas: TW_Sui_Proto_ObjectRef? = nil
}

/// Input data necessary to create a signed transaction.
public struct TW_Sui_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///  Private key to sign the transaction (bytes).
  public var privateKey: Data = Data()

  /// Optional transaction signer.
  /// Needs to be set if no private key provided at `TransactionCompiler` module.
  public var signer: String = String()

  public var transactionPayload: TW_Sui_Proto_SigningInput.OneOf_TransactionPayload? = nil

  public var signDirectMessage: TW_Sui_Proto_SignDirect {
    get {
      if case .signDirectMessage(let v)? = transactionPayload {return v}
      return TW_Sui_Proto_SignDirect()
    }
    set {transactionPayload = .signDirectMessage(newValue)}
  }

  public var pay: TW_Sui_Proto_Pay {
    get {
      if case .pay(let v)? = transactionPayload {return v}
      return TW_Sui_Proto_Pay()
    }
    set {transactionPayload = .pay(newValue)}
  }

  public var paySui: TW_Sui_Proto_PaySui {
    get {
      if case .paySui(let v)? = transactionPayload {return v}
      return TW_Sui_Proto_PaySui()
    }
    set {transactionPayload = .paySui(newValue)}
  }

  public var payAllSui: TW_Sui_Proto_PayAllSui {
    get {
      if case .payAllSui(let v)? = transactionPayload {return v}
      return TW_Sui_Proto_PayAllSui()
    }
    set {transactionPayload = .payAllSui(newValue)}
  }

  public var requestAddStake: TW_Sui_Proto_RequestAddStake {
    get {
      if case .requestAddStake(let v)? = transactionPayload {return v}
      return TW_Sui_Proto_RequestAddStake()
    }
    set {transactionPayload = .requestAddStake(newValue)}
  }

  public var requestWithdrawStake: TW_Sui_Proto_RequestWithdrawStake {
    get {
      if case .requestWithdrawStake(let v)? = transactionPayload {return v}
      return TW_Sui_Proto_RequestWithdrawStake()
    }
    set {transactionPayload = .requestWithdrawStake(newValue)}
  }

  public var transferObject: TW_Sui_Proto_TransferObject {
    get {
      if case .transferObject(let v)? = transactionPayload {return v}
      return TW_Sui_Proto_TransferObject()
    }
    set {transactionPayload = .transferObject(newValue)}
  }

  /// The gas budget, the transaction will fail if the gas cost exceed the budget.
  public var gasBudget: UInt64 = 0

  /// Reference gas price.
  public var referenceGasPrice: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_TransactionPayload: Equatable {
    case signDirectMessage(TW_Sui_Proto_SignDirect)
    case pay(TW_Sui_Proto_Pay)
    case paySui(TW_Sui_Proto_PaySui)
    case payAllSui(TW_Sui_Proto_PayAllSui)
    case requestAddStake(TW_Sui_Proto_RequestAddStake)
    case requestWithdrawStake(TW_Sui_Proto_RequestWithdrawStake)
    case transferObject(TW_Sui_Proto_TransferObject)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Sui_Proto_SigningInput.OneOf_TransactionPayload, rhs: TW_Sui_Proto_SigningInput.OneOf_TransactionPayload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.signDirectMessage, .signDirectMessage): return {
        guard case .signDirectMessage(let l) = lhs, case .signDirectMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pay, .pay): return {
        guard case .pay(let l) = lhs, case .pay(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.paySui, .paySui): return {
        guard case .paySui(let l) = lhs, case .paySui(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.payAllSui, .payAllSui): return {
        guard case .payAllSui(let l) = lhs, case .payAllSui(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.requestAddStake, .requestAddStake): return {
        guard case .requestAddStake(let l) = lhs, case .requestAddStake(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.requestWithdrawStake, .requestWithdrawStake): return {
        guard case .requestWithdrawStake(let l) = lhs, case .requestWithdrawStake(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.transferObject, .transferObject): return {
        guard case .transferObject(let l) = lhs, case .transferObject(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Transaction signing output.
public struct TW_Sui_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The raw transaction without indent in base64
  public var unsignedTx: String = String()

  //// The signature encoded in base64
  public var signature: String = String()

  /// Error code, 0 is ok, other codes will be treated as errors.
  public var error: TW_Common_Proto_SigningError = .ok

  /// Error description.
  public var errorMessage: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Sui.Proto"

extension TW_Sui_Proto_ObjectRef: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectRef"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "object_id"),
    2: .same(proto: "version"),
    3: .standard(proto: "object_digest"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.objectID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.version) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.objectDigest) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.objectID.isEmpty {
      try visitor.visitSingularStringField(value: self.objectID, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt64Field(value: self.version, fieldNumber: 2)
    }
    if !self.objectDigest.isEmpty {
      try visitor.visitSingularStringField(value: self.objectDigest, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_ObjectRef, rhs: TW_Sui_Proto_ObjectRef) -> Bool {
    if lhs.objectID != rhs.objectID {return false}
    if lhs.version != rhs.version {return false}
    if lhs.objectDigest != rhs.objectDigest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Sui_Proto_Amount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Amount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_Amount, rhs: TW_Sui_Proto_Amount) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Sui_Proto_SignDirect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignDirect"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unsigned_tx_msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.unsignedTxMsg) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.unsignedTxMsg.isEmpty {
      try visitor.visitSingularStringField(value: self.unsignedTxMsg, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_SignDirect, rhs: TW_Sui_Proto_SignDirect) -> Bool {
    if lhs.unsignedTxMsg != rhs.unsignedTxMsg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Sui_Proto_Pay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Pay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_coins"),
    2: .same(proto: "recipients"),
    3: .same(proto: "amounts"),
    4: .same(proto: "gas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.inputCoins) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.recipients) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.amounts) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._gas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.inputCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputCoins, fieldNumber: 1)
    }
    if !self.recipients.isEmpty {
      try visitor.visitRepeatedStringField(value: self.recipients, fieldNumber: 2)
    }
    if !self.amounts.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.amounts, fieldNumber: 3)
    }
    try { if let v = self._gas {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_Pay, rhs: TW_Sui_Proto_Pay) -> Bool {
    if lhs.inputCoins != rhs.inputCoins {return false}
    if lhs.recipients != rhs.recipients {return false}
    if lhs.amounts != rhs.amounts {return false}
    if lhs._gas != rhs._gas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Sui_Proto_PaySui: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaySui"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_coins"),
    2: .same(proto: "recipients"),
    3: .same(proto: "amounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.inputCoins) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.recipients) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.amounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputCoins, fieldNumber: 1)
    }
    if !self.recipients.isEmpty {
      try visitor.visitRepeatedStringField(value: self.recipients, fieldNumber: 2)
    }
    if !self.amounts.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.amounts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_PaySui, rhs: TW_Sui_Proto_PaySui) -> Bool {
    if lhs.inputCoins != rhs.inputCoins {return false}
    if lhs.recipients != rhs.recipients {return false}
    if lhs.amounts != rhs.amounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Sui_Proto_PayAllSui: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PayAllSui"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_coins"),
    2: .same(proto: "recipient"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.inputCoins) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputCoins, fieldNumber: 1)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_PayAllSui, rhs: TW_Sui_Proto_PayAllSui) -> Bool {
    if lhs.inputCoins != rhs.inputCoins {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Sui_Proto_RequestAddStake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestAddStake"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "coins"),
    2: .same(proto: "amount"),
    3: .same(proto: "validator"),
    4: .same(proto: "gas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.validator) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._gas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.validator.isEmpty {
      try visitor.visitSingularStringField(value: self.validator, fieldNumber: 3)
    }
    try { if let v = self._gas {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_RequestAddStake, rhs: TW_Sui_Proto_RequestAddStake) -> Bool {
    if lhs.coins != rhs.coins {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.validator != rhs.validator {return false}
    if lhs._gas != rhs._gas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Sui_Proto_RequestWithdrawStake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestWithdrawStake"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "staked_sui"),
    2: .same(proto: "gas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._stakedSui) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._gas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._stakedSui {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._gas {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_RequestWithdrawStake, rhs: TW_Sui_Proto_RequestWithdrawStake) -> Bool {
    if lhs._stakedSui != rhs._stakedSui {return false}
    if lhs._gas != rhs._gas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Sui_Proto_TransferObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "object"),
    2: .same(proto: "recipient"),
    3: .same(proto: "gas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._object) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._gas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._object {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 2)
    }
    try { if let v = self._gas {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_TransferObject, rhs: TW_Sui_Proto_TransferObject) -> Bool {
    if lhs._object != rhs._object {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs._gas != rhs._gas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Sui_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "private_key"),
    2: .same(proto: "signer"),
    3: .standard(proto: "sign_direct_message"),
    4: .same(proto: "pay"),
    5: .standard(proto: "pay_sui"),
    6: .standard(proto: "pay_all_sui"),
    7: .standard(proto: "request_add_stake"),
    8: .standard(proto: "request_withdraw_stake"),
    9: .standard(proto: "transfer_object"),
    12: .standard(proto: "gas_budget"),
    13: .standard(proto: "reference_gas_price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      case 3: try {
        var v: TW_Sui_Proto_SignDirect?
        var hadOneofValue = false
        if let current = self.transactionPayload {
          hadOneofValue = true
          if case .signDirectMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionPayload = .signDirectMessage(v)
        }
      }()
      case 4: try {
        var v: TW_Sui_Proto_Pay?
        var hadOneofValue = false
        if let current = self.transactionPayload {
          hadOneofValue = true
          if case .pay(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionPayload = .pay(v)
        }
      }()
      case 5: try {
        var v: TW_Sui_Proto_PaySui?
        var hadOneofValue = false
        if let current = self.transactionPayload {
          hadOneofValue = true
          if case .paySui(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionPayload = .paySui(v)
        }
      }()
      case 6: try {
        var v: TW_Sui_Proto_PayAllSui?
        var hadOneofValue = false
        if let current = self.transactionPayload {
          hadOneofValue = true
          if case .payAllSui(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionPayload = .payAllSui(v)
        }
      }()
      case 7: try {
        var v: TW_Sui_Proto_RequestAddStake?
        var hadOneofValue = false
        if let current = self.transactionPayload {
          hadOneofValue = true
          if case .requestAddStake(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionPayload = .requestAddStake(v)
        }
      }()
      case 8: try {
        var v: TW_Sui_Proto_RequestWithdrawStake?
        var hadOneofValue = false
        if let current = self.transactionPayload {
          hadOneofValue = true
          if case .requestWithdrawStake(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionPayload = .requestWithdrawStake(v)
        }
      }()
      case 9: try {
        var v: TW_Sui_Proto_TransferObject?
        var hadOneofValue = false
        if let current = self.transactionPayload {
          hadOneofValue = true
          if case .transferObject(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionPayload = .transferObject(v)
        }
      }()
      case 12: try { try decoder.decodeSingularUInt64Field(value: &self.gasBudget) }()
      case 13: try { try decoder.decodeSingularUInt64Field(value: &self.referenceGasPrice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 1)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 2)
    }
    switch self.transactionPayload {
    case .signDirectMessage?: try {
      guard case .signDirectMessage(let v)? = self.transactionPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .pay?: try {
      guard case .pay(let v)? = self.transactionPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .paySui?: try {
      guard case .paySui(let v)? = self.transactionPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .payAllSui?: try {
      guard case .payAllSui(let v)? = self.transactionPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .requestAddStake?: try {
      guard case .requestAddStake(let v)? = self.transactionPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .requestWithdrawStake?: try {
      guard case .requestWithdrawStake(let v)? = self.transactionPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .transferObject?: try {
      guard case .transferObject(let v)? = self.transactionPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    if self.gasBudget != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasBudget, fieldNumber: 12)
    }
    if self.referenceGasPrice != 0 {
      try visitor.visitSingularUInt64Field(value: self.referenceGasPrice, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_SigningInput, rhs: TW_Sui_Proto_SigningInput) -> Bool {
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.transactionPayload != rhs.transactionPayload {return false}
    if lhs.gasBudget != rhs.gasBudget {return false}
    if lhs.referenceGasPrice != rhs.referenceGasPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Sui_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unsigned_tx"),
    2: .same(proto: "signature"),
    3: .same(proto: "error"),
    4: .standard(proto: "error_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.unsignedTx) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.signature) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.error) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.unsignedTx.isEmpty {
      try visitor.visitSingularStringField(value: self.unsignedTx, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 2)
    }
    if self.error != .ok {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 3)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Sui_Proto_SigningOutput, rhs: TW_Sui_Proto_SigningOutput) -> Bool {
    if lhs.unsignedTx != rhs.unsignedTx {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.error != rhs.error {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
