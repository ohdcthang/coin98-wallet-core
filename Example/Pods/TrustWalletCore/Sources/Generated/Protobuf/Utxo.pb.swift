// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Utxo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum TW_Utxo_Proto_Error: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case ok // = 0
  case invalidLeafHash // = 1
  case invalidSighashType // = 2
  case invalidLockTime // = 3
  case invalidTxid // = 4
  case sighashFailed // = 5
  case missingSighashMethod // = 6
  case failedEncoding // = 7
  case insufficientInputs // = 8
  case noOutputsSpecified // = 9
  case missingChangeScriptPubkey // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .ok
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 1: self = .invalidLeafHash
    case 2: self = .invalidSighashType
    case 3: self = .invalidLockTime
    case 4: self = .invalidTxid
    case 5: self = .sighashFailed
    case 6: self = .missingSighashMethod
    case 7: self = .failedEncoding
    case 8: self = .insufficientInputs
    case 9: self = .noOutputsSpecified
    case 10: self = .missingChangeScriptPubkey
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ok: return 0
    case .invalidLeafHash: return 1
    case .invalidSighashType: return 2
    case .invalidLockTime: return 3
    case .invalidTxid: return 4
    case .sighashFailed: return 5
    case .missingSighashMethod: return 6
    case .failedEncoding: return 7
    case .insufficientInputs: return 8
    case .noOutputsSpecified: return 9
    case .missingChangeScriptPubkey: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Utxo_Proto_Error: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Utxo_Proto_Error] = [
    .ok,
    .invalidLeafHash,
    .invalidSighashType,
    .invalidLockTime,
    .invalidTxid,
    .sighashFailed,
    .missingSighashMethod,
    .failedEncoding,
    .insufficientInputs,
    .noOutputsSpecified,
    .missingChangeScriptPubkey,
  ]
}

#endif  // swift(>=4.2)

public enum TW_Utxo_Proto_InputSelector: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Automatically select enough inputs in an ascending order to cover the
  /// outputs of the transaction.
  case selectAscending // = 0

  /// Automatically select enough inputs in the given order to cover the
  /// outputs of the transaction.
  case selectInOrder // = 1

  /// Automatically select enough inputs in an descending order to cover the
  /// outputs of the transaction.
  case selectDescending // = 2

  /// Use all the inputs provided in the given order.
  case useAll // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .selectAscending
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .selectAscending
    case 1: self = .selectInOrder
    case 2: self = .selectDescending
    case 10: self = .useAll
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .selectAscending: return 0
    case .selectInOrder: return 1
    case .selectDescending: return 2
    case .useAll: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Utxo_Proto_InputSelector: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Utxo_Proto_InputSelector] = [
    .selectAscending,
    .selectInOrder,
    .selectDescending,
    .useAll,
  ]
}

#endif  // swift(>=4.2)

public enum TW_Utxo_Proto_SigningMethod: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Used for P2SH and P2PKH
  case legacy // = 0

  /// Used for P2WSH and P2WPKH
  case segwit // = 1

  /// Used for P2TR key-path and P2TR script-paty
  case taprootAll // = 2

  /// Used for P2TR key-path and P2TR script-paty if only one prevout should be
  /// used to calculate the Sighash. Normally this is not used.
  case taprootOnePrevout // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .legacy
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .legacy
    case 1: self = .segwit
    case 2: self = .taprootAll
    case 3: self = .taprootOnePrevout
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .legacy: return 0
    case .segwit: return 1
    case .taprootAll: return 2
    case .taprootOnePrevout: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Utxo_Proto_SigningMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Utxo_Proto_SigningMethod] = [
    .legacy,
    .segwit,
    .taprootAll,
    .taprootOnePrevout,
  ]
}

#endif  // swift(>=4.2)

public enum TW_Utxo_Proto_SighashType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Use default (All)
  case useDefault // = 0

  /// Sign all outputs (default).
  case all // = 1

  /// Sign no outputs, anyone can choose the destination.
  case none // = 2

  /// Sign the output whose index matches this inputs index.
  case single // = 3

  ///Sign all outputs but only this input.
  case allPlusAnyoneCanPay // = 129

  /// Sign no outputs and only this input.
  case nonePlusAnyoneCanPay // = 130

  /// Sign one output and only this input.
  case singlePlusAnyoneCanPay // = 131
  case UNRECOGNIZED(Int)

  public init() {
    self = .useDefault
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .useDefault
    case 1: self = .all
    case 2: self = .none
    case 3: self = .single
    case 129: self = .allPlusAnyoneCanPay
    case 130: self = .nonePlusAnyoneCanPay
    case 131: self = .singlePlusAnyoneCanPay
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .useDefault: return 0
    case .all: return 1
    case .none: return 2
    case .single: return 3
    case .allPlusAnyoneCanPay: return 129
    case .nonePlusAnyoneCanPay: return 130
    case .singlePlusAnyoneCanPay: return 131
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Utxo_Proto_SighashType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Utxo_Proto_SighashType] = [
    .useDefault,
    .all,
    .none,
    .single,
    .allPlusAnyoneCanPay,
    .nonePlusAnyoneCanPay,
    .singlePlusAnyoneCanPay,
  ]
}

#endif  // swift(>=4.2)

public struct TW_Utxo_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The protocol version.
  public var version: Int32 = 0

  /// Block height or timestamp indicating at what point transactions can be
  /// included in a block.
  public var lockTime: TW_Utxo_Proto_LockTime {
    get {return _lockTime ?? TW_Utxo_Proto_LockTime()}
    set {_lockTime = newValue}
  }
  /// Returns true if `lockTime` has been explicitly set.
  public var hasLockTime: Bool {return self._lockTime != nil}
  /// Clears the value of `lockTime`. Subsequent reads from it will return its default value.
  public mutating func clearLockTime() {self._lockTime = nil}

  /// The inputs of the transaction.
  public var inputs: [TW_Utxo_Proto_TxIn] = []

  /// The outputs of the transaction.
  public var outputs: [TW_Utxo_Proto_TxOut] = []

  /// How inputs should be selected.
  public var inputSelector: TW_Utxo_Proto_InputSelector = .selectAscending

  /// The base unit per weight. In the case of Bitcoin, that would refer to
  /// satoshis by vbyte ("satVb").
  public var weightBase: UInt64 = 0

  /// The change output where to send left-over funds to (usually the sender).
  public var changeScriptPubkey: Data = Data()

  /// Explicility disable change output creation.
  public var disableChangeOutput: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lockTime: TW_Utxo_Proto_LockTime? = nil
}

public struct TW_Utxo_Proto_LockTime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var variant: TW_Utxo_Proto_LockTime.OneOf_Variant? = nil

  public var blocks: UInt32 {
    get {
      if case .blocks(let v)? = variant {return v}
      return 0
    }
    set {variant = .blocks(newValue)}
  }

  public var seconds: UInt32 {
    get {
      if case .seconds(let v)? = variant {return v}
      return 0
    }
    set {variant = .seconds(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Variant: Equatable {
    case blocks(UInt32)
    case seconds(UInt32)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Utxo_Proto_LockTime.OneOf_Variant, rhs: TW_Utxo_Proto_LockTime.OneOf_Variant) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.blocks, .blocks): return {
        guard case .blocks(let l) = lhs, case .blocks(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.seconds, .seconds): return {
        guard case .seconds(let l) = lhs, case .seconds(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct TW_Utxo_Proto_TxIn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The referenced transaction ID in REVERSED order.
  public var txid: Data = Data()

  /// The position in the previous transactions output that this input
  /// references.
  public var vout: UInt32 = 0

  /// The value of this input, such as satoshis. Required for producing
  /// Segwit/Taproot transactions.
  public var value: UInt64 = 0

  /// The sequence number, used for timelocks, replace-by-fee, etc. Normally
  /// this number is simply 4294967295 (0xFFFFFFFF) .
  public var sequence: UInt32 = 0

  /// The spending condition of the referenced output.
  public var scriptPubkey: Data = Data()

  /// The sighash type, normally `SighashType::UseDefault` (All).
  public var sighashType: TW_Utxo_Proto_SighashType = .useDefault

  /// The signing method.
  public var signingMethod: TW_Utxo_Proto_SigningMethod = .legacy

  /// The estimated weight of the input, required for estimating fees.
  public var weightEstimate: UInt64 = 0

  /// If this input is a Taproot script-path (complex transaction), then this
  /// leaf hash is required in order to compute the sighash.
  public var leafHash: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The output of a transaction.
public struct TW_Utxo_Proto_TxOut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The value of the output.
  public var value: UInt64 = 0

  /// The spending condition of the output.
  public var scriptPubkey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Utxo_Proto_PreSigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// error code, 0 is ok, other codes will be treated as errors
  public var error: TW_Utxo_Proto_Error = .ok

  /// The transaction ID in NON-reversed order. Note that this must be reversed
  /// when referencing in future transactions.
  public var txid: Data = Data()

  //// Sighashes to be signed; ECDSA for legacy and Segwit, Schnorr for Taproot.
  public var sighashes: [TW_Utxo_Proto_Sighash] = []

  /// The raw inputs.
  public var inputs: [TW_Utxo_Proto_TxIn] = []

  /// The raw outputs.
  public var outputs: [TW_Utxo_Proto_TxOut] = []

  /// The estimated weight of the transaction.
  public var weightEstimate: UInt64 = 0

  /// The estimated fee of the transaction denominated in the base unit (such
  /// as satoshis).
  public var feeEstimate: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Utxo_Proto_Sighash {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The sighash to be signed.
  public var sighash: Data = Data()

  /// The used signing method for this sighash.
  public var signingMethod: TW_Utxo_Proto_SigningMethod = .legacy

  /// The used sighash type for this sighash.
  public var sighashType: TW_Utxo_Proto_SighashType = .useDefault

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Utxo_Proto_PreSerialization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The protocol version, is currently expected to be 1 or 2 (BIP68)
  public var version: Int32 = 0

  /// Block height or timestamp indicating at what point transactions can be
  /// included in a block.
  public var lockTime: TW_Utxo_Proto_LockTime {
    get {return _lockTime ?? TW_Utxo_Proto_LockTime()}
    set {_lockTime = newValue}
  }
  /// Returns true if `lockTime` has been explicitly set.
  public var hasLockTime: Bool {return self._lockTime != nil}
  /// Clears the value of `lockTime`. Subsequent reads from it will return its default value.
  public mutating func clearLockTime() {self._lockTime = nil}

  /// The transaction inputs containing the serialized claim scripts.
  public var inputs: [TW_Utxo_Proto_TxInClaim] = []

  /// The transaction outputs.
  public var outputs: [TW_Utxo_Proto_TxOut] = []

  /// The base unit per weight. In the case of Bitcoin, that would refer to
  /// satoshis ("satVb").
  public var weightBase: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lockTime: TW_Utxo_Proto_LockTime? = nil
}

public struct TW_Utxo_Proto_TxInClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The referenced transaction hash.
  public var txid: Data = Data()

  /// The index of the referenced output.
  public var vout: UInt32 = 0

  /// The value of this input, such as satoshis.
  public var value: UInt64 = 0

  /// The sequence number (TODO).
  public var sequence: UInt32 = 0

  /// The script used for claiming an input.
  public var scriptSig: Data = Data()

  /// The script used for claiming an input.
  public var witnessItems: [Data] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Utxo_Proto_SerializedTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// error code, 0 is ok, other codes will be treated as errors
  public var error: TW_Utxo_Proto_Error = .ok

  /// The encoded transaction, ready to be submitted to the network.
  public var encoded: Data = Data()

  /// The transaction ID.
  public var txid: Data = Data()

  /// The total and final weight of the transaction.
  public var weight: UInt64 = 0

  /// The total and final fee of the transaction denominated in the base unit
  /// (such as satoshis).
  public var fee: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Utxo.Proto"

extension TW_Utxo_Proto_Error: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "Error_invalid_leaf_hash"),
    2: .same(proto: "Error_invalid_sighash_type"),
    3: .same(proto: "Error_invalid_lock_time"),
    4: .same(proto: "Error_invalid_txid"),
    5: .same(proto: "Error_sighash_failed"),
    6: .same(proto: "Error_missing_sighash_method"),
    7: .same(proto: "Error_failed_encoding"),
    8: .same(proto: "Error_insufficient_inputs"),
    9: .same(proto: "Error_no_outputs_specified"),
    10: .same(proto: "Error_missing_change_script_pubkey"),
  ]
}

extension TW_Utxo_Proto_InputSelector: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SelectAscending"),
    1: .same(proto: "SelectInOrder"),
    2: .same(proto: "SelectDescending"),
    10: .same(proto: "UseAll"),
  ]
}

extension TW_Utxo_Proto_SigningMethod: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Legacy"),
    1: .same(proto: "Segwit"),
    2: .same(proto: "TaprootAll"),
    3: .same(proto: "TaprootOnePrevout"),
  ]
}

extension TW_Utxo_Proto_SighashType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UseDefault"),
    1: .same(proto: "All"),
    2: .same(proto: "None"),
    3: .same(proto: "Single"),
    129: .same(proto: "AllPlusAnyoneCanPay"),
    130: .same(proto: "NonePlusAnyoneCanPay"),
    131: .same(proto: "SinglePlusAnyoneCanPay"),
  ]
}

extension TW_Utxo_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "lock_time"),
    3: .same(proto: "inputs"),
    4: .same(proto: "outputs"),
    5: .standard(proto: "input_selector"),
    6: .standard(proto: "weight_base"),
    7: .standard(proto: "change_script_pubkey"),
    8: .standard(proto: "disable_change_output"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lockTime) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.inputSelector) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.weightBase) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.changeScriptPubkey) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.disableChangeOutput) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    try { if let v = self._lockTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 3)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 4)
    }
    if self.inputSelector != .selectAscending {
      try visitor.visitSingularEnumField(value: self.inputSelector, fieldNumber: 5)
    }
    if self.weightBase != 0 {
      try visitor.visitSingularUInt64Field(value: self.weightBase, fieldNumber: 6)
    }
    if !self.changeScriptPubkey.isEmpty {
      try visitor.visitSingularBytesField(value: self.changeScriptPubkey, fieldNumber: 7)
    }
    if self.disableChangeOutput != false {
      try visitor.visitSingularBoolField(value: self.disableChangeOutput, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Utxo_Proto_SigningInput, rhs: TW_Utxo_Proto_SigningInput) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._lockTime != rhs._lockTime {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.inputSelector != rhs.inputSelector {return false}
    if lhs.weightBase != rhs.weightBase {return false}
    if lhs.changeScriptPubkey != rhs.changeScriptPubkey {return false}
    if lhs.disableChangeOutput != rhs.disableChangeOutput {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Utxo_Proto_LockTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LockTime"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blocks"),
    2: .same(proto: "seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {
          if self.variant != nil {try decoder.handleConflictingOneOf()}
          self.variant = .blocks(v)
        }
      }()
      case 2: try {
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {
          if self.variant != nil {try decoder.handleConflictingOneOf()}
          self.variant = .seconds(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.variant {
    case .blocks?: try {
      guard case .blocks(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }()
    case .seconds?: try {
      guard case .seconds(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Utxo_Proto_LockTime, rhs: TW_Utxo_Proto_LockTime) -> Bool {
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Utxo_Proto_TxIn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TxIn"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txid"),
    2: .same(proto: "vout"),
    3: .same(proto: "value"),
    4: .same(proto: "sequence"),
    7: .standard(proto: "script_pubkey"),
    8: .standard(proto: "sighash_type"),
    9: .standard(proto: "signing_method"),
    10: .standard(proto: "weight_estimate"),
    11: .standard(proto: "leaf_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.txid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.vout) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.value) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.sequence) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.scriptPubkey) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.sighashType) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.signingMethod) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.weightEstimate) }()
      case 11: try { try decoder.decodeSingularBytesField(value: &self.leafHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txid.isEmpty {
      try visitor.visitSingularBytesField(value: self.txid, fieldNumber: 1)
    }
    if self.vout != 0 {
      try visitor.visitSingularUInt32Field(value: self.vout, fieldNumber: 2)
    }
    if self.value != 0 {
      try visitor.visitSingularUInt64Field(value: self.value, fieldNumber: 3)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt32Field(value: self.sequence, fieldNumber: 4)
    }
    if !self.scriptPubkey.isEmpty {
      try visitor.visitSingularBytesField(value: self.scriptPubkey, fieldNumber: 7)
    }
    if self.sighashType != .useDefault {
      try visitor.visitSingularEnumField(value: self.sighashType, fieldNumber: 8)
    }
    if self.signingMethod != .legacy {
      try visitor.visitSingularEnumField(value: self.signingMethod, fieldNumber: 9)
    }
    if self.weightEstimate != 0 {
      try visitor.visitSingularUInt64Field(value: self.weightEstimate, fieldNumber: 10)
    }
    if !self.leafHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.leafHash, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Utxo_Proto_TxIn, rhs: TW_Utxo_Proto_TxIn) -> Bool {
    if lhs.txid != rhs.txid {return false}
    if lhs.vout != rhs.vout {return false}
    if lhs.value != rhs.value {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.scriptPubkey != rhs.scriptPubkey {return false}
    if lhs.sighashType != rhs.sighashType {return false}
    if lhs.signingMethod != rhs.signingMethod {return false}
    if lhs.weightEstimate != rhs.weightEstimate {return false}
    if lhs.leafHash != rhs.leafHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Utxo_Proto_TxOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TxOut"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "script_pubkey"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.value) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.scriptPubkey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularUInt64Field(value: self.value, fieldNumber: 1)
    }
    if !self.scriptPubkey.isEmpty {
      try visitor.visitSingularBytesField(value: self.scriptPubkey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Utxo_Proto_TxOut, rhs: TW_Utxo_Proto_TxOut) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.scriptPubkey != rhs.scriptPubkey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Utxo_Proto_PreSigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PreSigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "txid"),
    3: .same(proto: "sighashes"),
    4: .same(proto: "inputs"),
    5: .same(proto: "outputs"),
    6: .standard(proto: "weight_estimate"),
    7: .standard(proto: "fee_estimate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.error) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.txid) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.sighashes) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.weightEstimate) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.feeEstimate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.error != .ok {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 1)
    }
    if !self.txid.isEmpty {
      try visitor.visitSingularBytesField(value: self.txid, fieldNumber: 2)
    }
    if !self.sighashes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sighashes, fieldNumber: 3)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 4)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 5)
    }
    if self.weightEstimate != 0 {
      try visitor.visitSingularUInt64Field(value: self.weightEstimate, fieldNumber: 6)
    }
    if self.feeEstimate != 0 {
      try visitor.visitSingularUInt64Field(value: self.feeEstimate, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Utxo_Proto_PreSigningOutput, rhs: TW_Utxo_Proto_PreSigningOutput) -> Bool {
    if lhs.error != rhs.error {return false}
    if lhs.txid != rhs.txid {return false}
    if lhs.sighashes != rhs.sighashes {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.weightEstimate != rhs.weightEstimate {return false}
    if lhs.feeEstimate != rhs.feeEstimate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Utxo_Proto_Sighash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Sighash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sighash"),
    2: .standard(proto: "signing_method"),
    3: .standard(proto: "sighash_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.sighash) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.signingMethod) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.sighashType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sighash.isEmpty {
      try visitor.visitSingularBytesField(value: self.sighash, fieldNumber: 1)
    }
    if self.signingMethod != .legacy {
      try visitor.visitSingularEnumField(value: self.signingMethod, fieldNumber: 2)
    }
    if self.sighashType != .useDefault {
      try visitor.visitSingularEnumField(value: self.sighashType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Utxo_Proto_Sighash, rhs: TW_Utxo_Proto_Sighash) -> Bool {
    if lhs.sighash != rhs.sighash {return false}
    if lhs.signingMethod != rhs.signingMethod {return false}
    if lhs.sighashType != rhs.sighashType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Utxo_Proto_PreSerialization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PreSerialization"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "lock_time"),
    3: .same(proto: "inputs"),
    4: .same(proto: "outputs"),
    5: .standard(proto: "weight_base"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lockTime) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.weightBase) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    try { if let v = self._lockTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 3)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 4)
    }
    if self.weightBase != 0 {
      try visitor.visitSingularUInt64Field(value: self.weightBase, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Utxo_Proto_PreSerialization, rhs: TW_Utxo_Proto_PreSerialization) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._lockTime != rhs._lockTime {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.weightBase != rhs.weightBase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Utxo_Proto_TxInClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TxInClaim"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txid"),
    2: .same(proto: "vout"),
    3: .same(proto: "value"),
    4: .same(proto: "sequence"),
    5: .standard(proto: "script_sig"),
    6: .standard(proto: "witness_items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.txid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.vout) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.value) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.sequence) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.scriptSig) }()
      case 6: try { try decoder.decodeRepeatedBytesField(value: &self.witnessItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txid.isEmpty {
      try visitor.visitSingularBytesField(value: self.txid, fieldNumber: 1)
    }
    if self.vout != 0 {
      try visitor.visitSingularUInt32Field(value: self.vout, fieldNumber: 2)
    }
    if self.value != 0 {
      try visitor.visitSingularUInt64Field(value: self.value, fieldNumber: 3)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt32Field(value: self.sequence, fieldNumber: 4)
    }
    if !self.scriptSig.isEmpty {
      try visitor.visitSingularBytesField(value: self.scriptSig, fieldNumber: 5)
    }
    if !self.witnessItems.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.witnessItems, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Utxo_Proto_TxInClaim, rhs: TW_Utxo_Proto_TxInClaim) -> Bool {
    if lhs.txid != rhs.txid {return false}
    if lhs.vout != rhs.vout {return false}
    if lhs.value != rhs.value {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.scriptSig != rhs.scriptSig {return false}
    if lhs.witnessItems != rhs.witnessItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Utxo_Proto_SerializedTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SerializedTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "encoded"),
    3: .same(proto: "txid"),
    4: .same(proto: "weight"),
    5: .same(proto: "fee"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.error) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.encoded) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.txid) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.weight) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.fee) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.error != .ok {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 1)
    }
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 2)
    }
    if !self.txid.isEmpty {
      try visitor.visitSingularBytesField(value: self.txid, fieldNumber: 3)
    }
    if self.weight != 0 {
      try visitor.visitSingularUInt64Field(value: self.weight, fieldNumber: 4)
    }
    if self.fee != 0 {
      try visitor.visitSingularUInt64Field(value: self.fee, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Utxo_Proto_SerializedTransaction, rhs: TW_Utxo_Proto_SerializedTransaction) -> Bool {
    if lhs.error != rhs.error {return false}
    if lhs.encoded != rhs.encoded {return false}
    if lhs.txid != rhs.txid {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.fee != rhs.fee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
