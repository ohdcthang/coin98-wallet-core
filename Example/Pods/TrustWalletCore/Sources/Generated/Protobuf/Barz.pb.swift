// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Barz.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// FacetCutAction represents the action to be performed for a FacetCut
public enum TW_Barz_Proto_FacetCutAction: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case add // = 0
  case replace // = 1
  case remove // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .add
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .add
    case 1: self = .replace
    case 2: self = .remove
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .add: return 0
    case .replace: return 1
    case .remove: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Barz_Proto_FacetCutAction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Barz_Proto_FacetCutAction] = [
    .add,
    .replace,
    .remove,
  ]
}

#endif  // swift(>=4.2)

/// Input parameters for calculating a counterfactual address for ERC-4337 based smart contract wallet
public struct TW_Barz_Proto_ContractAddressInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ERC-4337 entry point
  public var entryPoint: String = String()

  /// Address of the contract factory
  public var factory: String = String()

  /// Diamond proxy facets required for the contract setup
  public var accountFacet: String = String()

  public var verificationFacet: String = String()

  public var facetRegistry: String = String()

  public var defaultFallback: String = String()

  /// Bytecode of the smart contract to deploy
  public var bytecode: String = String()

  /// PublicKey of the wallet
  public var publicKey: String = String()

  /// Salt is used to derive multiple account from the same public key
  public var salt: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// FacetCut represents a single operation to be performed on a facet
public struct TW_Barz_Proto_FacetCut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The address of the facet
  public var facetAddress: String = String()

  /// The action to perform
  public var action: TW_Barz_Proto_FacetCutAction = .add

  /// List of function selectors, each is bytes4
  public var functionSelectors: [Data] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// DiamondCutInput represents the input parameters for a diamondCut operation
public struct TW_Barz_Proto_DiamondCutInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of facet cuts to apply
  public var facetCuts: [TW_Barz_Proto_FacetCut] = []

  /// Address to call with `init` data after applying cuts
  public var initAddress: String = String()

  /// Data to pass to `init` function call
  public var initData: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Barz.Proto"

extension TW_Barz_Proto_FacetCutAction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ADD"),
    1: .same(proto: "REPLACE"),
    2: .same(proto: "REMOVE"),
  ]
}

extension TW_Barz_Proto_ContractAddressInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractAddressInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entry_point"),
    2: .same(proto: "factory"),
    3: .standard(proto: "account_facet"),
    4: .standard(proto: "verification_facet"),
    5: .standard(proto: "facet_registry"),
    6: .standard(proto: "default_fallback"),
    7: .same(proto: "bytecode"),
    8: .standard(proto: "public_key"),
    9: .same(proto: "salt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.entryPoint) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.factory) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accountFacet) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.verificationFacet) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.facetRegistry) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.defaultFallback) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.bytecode) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.publicKey) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.salt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entryPoint.isEmpty {
      try visitor.visitSingularStringField(value: self.entryPoint, fieldNumber: 1)
    }
    if !self.factory.isEmpty {
      try visitor.visitSingularStringField(value: self.factory, fieldNumber: 2)
    }
    if !self.accountFacet.isEmpty {
      try visitor.visitSingularStringField(value: self.accountFacet, fieldNumber: 3)
    }
    if !self.verificationFacet.isEmpty {
      try visitor.visitSingularStringField(value: self.verificationFacet, fieldNumber: 4)
    }
    if !self.facetRegistry.isEmpty {
      try visitor.visitSingularStringField(value: self.facetRegistry, fieldNumber: 5)
    }
    if !self.defaultFallback.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultFallback, fieldNumber: 6)
    }
    if !self.bytecode.isEmpty {
      try visitor.visitSingularStringField(value: self.bytecode, fieldNumber: 7)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.publicKey, fieldNumber: 8)
    }
    if self.salt != 0 {
      try visitor.visitSingularUInt32Field(value: self.salt, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Barz_Proto_ContractAddressInput, rhs: TW_Barz_Proto_ContractAddressInput) -> Bool {
    if lhs.entryPoint != rhs.entryPoint {return false}
    if lhs.factory != rhs.factory {return false}
    if lhs.accountFacet != rhs.accountFacet {return false}
    if lhs.verificationFacet != rhs.verificationFacet {return false}
    if lhs.facetRegistry != rhs.facetRegistry {return false}
    if lhs.defaultFallback != rhs.defaultFallback {return false}
    if lhs.bytecode != rhs.bytecode {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.salt != rhs.salt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Barz_Proto_FacetCut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FacetCut"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "facet_address"),
    2: .same(proto: "action"),
    3: .standard(proto: "function_selectors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.facetAddress) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 3: try { try decoder.decodeRepeatedBytesField(value: &self.functionSelectors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.facetAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.facetAddress, fieldNumber: 1)
    }
    if self.action != .add {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.functionSelectors.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.functionSelectors, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Barz_Proto_FacetCut, rhs: TW_Barz_Proto_FacetCut) -> Bool {
    if lhs.facetAddress != rhs.facetAddress {return false}
    if lhs.action != rhs.action {return false}
    if lhs.functionSelectors != rhs.functionSelectors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Barz_Proto_DiamondCutInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DiamondCutInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "facet_cuts"),
    2: .standard(proto: "init_address"),
    3: .standard(proto: "init_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.facetCuts) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.initAddress) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.initData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.facetCuts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.facetCuts, fieldNumber: 1)
    }
    if !self.initAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.initAddress, fieldNumber: 2)
    }
    if !self.initData.isEmpty {
      try visitor.visitSingularBytesField(value: self.initData, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Barz_Proto_DiamondCutInput, rhs: TW_Barz_Proto_DiamondCutInput) -> Bool {
    if lhs.facetCuts != rhs.facetCuts {return false}
    if lhs.initAddress != rhs.initAddress {return false}
    if lhs.initData != rhs.initData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
