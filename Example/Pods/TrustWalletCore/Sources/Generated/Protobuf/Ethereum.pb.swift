// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Ethereum.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Transaction type
public enum TW_Ethereum_Proto_TransactionMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Legacy transaction, pre-EIP2718/EIP1559; for fee gasPrice/gasLimit is used
  case legacy // = 0

  /// Enveloped transaction EIP2718 (with type 0x2), fee is according to EIP1559 (base fee, inclusion fee, ...) 
  case enveloped // = 1

  /// EIP4337-compatible UserOperation
  case userOp // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .legacy
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .legacy
    case 1: self = .enveloped
    case 2: self = .userOp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .legacy: return 0
    case .enveloped: return 1
    case .userOp: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Ethereum_Proto_TransactionMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Ethereum_Proto_TransactionMode] = [
    .legacy,
    .enveloped,
    .userOp,
  ]
}

#endif  // swift(>=4.2)

public enum TW_Ethereum_Proto_MessageType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Sign a message following EIP-191.
  case legacy // = 0

  /// Sign a message following EIP-191 with EIP-155 replay attack protection.
  case eip155 // = 1

  /// Sign a typed message EIP-712 V4.
  case typed // = 2

  /// Sign a typed message EIP-712 V4 with EIP-155 replay attack protection.
  case typedEip155 // = 3

  /// Sign a message with Immutable X msg type.
  case immutableX // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .legacy
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .legacy
    case 1: self = .eip155
    case 2: self = .typed
    case 3: self = .typedEip155
    case 4: self = .immutableX
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .legacy: return 0
    case .eip155: return 1
    case .typed: return 2
    case .typedEip155: return 3
    case .immutableX: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Ethereum_Proto_MessageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Ethereum_Proto_MessageType] = [
    .legacy,
    .eip155,
    .typed,
    .typedEip155,
    .immutableX,
  ]
}

#endif  // swift(>=4.2)

/// Transaction (transfer, smart contract call, ...)
public struct TW_Ethereum_Proto_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Payload transfer
  public var transactionOneof: TW_Ethereum_Proto_Transaction.OneOf_TransactionOneof? = nil

  public var transfer: TW_Ethereum_Proto_Transaction.Transfer {
    get {
      if case .transfer(let v)? = transactionOneof {return v}
      return TW_Ethereum_Proto_Transaction.Transfer()
    }
    set {transactionOneof = .transfer(newValue)}
  }

  public var erc20Transfer: TW_Ethereum_Proto_Transaction.ERC20Transfer {
    get {
      if case .erc20Transfer(let v)? = transactionOneof {return v}
      return TW_Ethereum_Proto_Transaction.ERC20Transfer()
    }
    set {transactionOneof = .erc20Transfer(newValue)}
  }

  public var erc20Approve: TW_Ethereum_Proto_Transaction.ERC20Approve {
    get {
      if case .erc20Approve(let v)? = transactionOneof {return v}
      return TW_Ethereum_Proto_Transaction.ERC20Approve()
    }
    set {transactionOneof = .erc20Approve(newValue)}
  }

  public var erc721Transfer: TW_Ethereum_Proto_Transaction.ERC721Transfer {
    get {
      if case .erc721Transfer(let v)? = transactionOneof {return v}
      return TW_Ethereum_Proto_Transaction.ERC721Transfer()
    }
    set {transactionOneof = .erc721Transfer(newValue)}
  }

  public var erc1155Transfer: TW_Ethereum_Proto_Transaction.ERC1155Transfer {
    get {
      if case .erc1155Transfer(let v)? = transactionOneof {return v}
      return TW_Ethereum_Proto_Transaction.ERC1155Transfer()
    }
    set {transactionOneof = .erc1155Transfer(newValue)}
  }

  public var contractGeneric: TW_Ethereum_Proto_Transaction.ContractGeneric {
    get {
      if case .contractGeneric(let v)? = transactionOneof {return v}
      return TW_Ethereum_Proto_Transaction.ContractGeneric()
    }
    set {transactionOneof = .contractGeneric(newValue)}
  }

  public var batch: TW_Ethereum_Proto_Transaction.Batch {
    get {
      if case .batch(let v)? = transactionOneof {return v}
      return TW_Ethereum_Proto_Transaction.Batch()
    }
    set {transactionOneof = .batch(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Payload transfer
  public enum OneOf_TransactionOneof: Equatable {
    case transfer(TW_Ethereum_Proto_Transaction.Transfer)
    case erc20Transfer(TW_Ethereum_Proto_Transaction.ERC20Transfer)
    case erc20Approve(TW_Ethereum_Proto_Transaction.ERC20Approve)
    case erc721Transfer(TW_Ethereum_Proto_Transaction.ERC721Transfer)
    case erc1155Transfer(TW_Ethereum_Proto_Transaction.ERC1155Transfer)
    case contractGeneric(TW_Ethereum_Proto_Transaction.ContractGeneric)
    case batch(TW_Ethereum_Proto_Transaction.Batch)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Ethereum_Proto_Transaction.OneOf_TransactionOneof, rhs: TW_Ethereum_Proto_Transaction.OneOf_TransactionOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.transfer, .transfer): return {
        guard case .transfer(let l) = lhs, case .transfer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.erc20Transfer, .erc20Transfer): return {
        guard case .erc20Transfer(let l) = lhs, case .erc20Transfer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.erc20Approve, .erc20Approve): return {
        guard case .erc20Approve(let l) = lhs, case .erc20Approve(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.erc721Transfer, .erc721Transfer): return {
        guard case .erc721Transfer(let l) = lhs, case .erc721Transfer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.erc1155Transfer, .erc1155Transfer): return {
        guard case .erc1155Transfer(let l) = lhs, case .erc1155Transfer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contractGeneric, .contractGeneric): return {
        guard case .contractGeneric(let l) = lhs, case .contractGeneric(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.batch, .batch): return {
        guard case .batch(let l) = lhs, case .batch(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Native coin transfer transaction
  public struct Transfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Amount to send in wei (uint256, serialized big endian)
    public var amount: Data = Data()

    /// Optional payload data
    public var data: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// ERC20 token transfer transaction
  public struct ERC20Transfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// destination address (string)
    public var to: String = String()

    /// Amount to send (uint256, serialized big endian)
    public var amount: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// ERC20 approve transaction
  public struct ERC20Approve {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Target of the approval
    public var spender: String = String()

    /// Amount to send (uint256, serialized big endian)
    public var amount: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// ERC721 NFT transfer transaction
  public struct ERC721Transfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Source address
    public var from: String = String()

    /// Destination address
    public var to: String = String()

    /// ID of the token (uint256, serialized big endian)
    public var tokenID: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// ERC1155 NFT transfer transaction
  public struct ERC1155Transfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Source address
    public var from: String = String()

    /// Destination address
    public var to: String = String()

    /// ID of the token (uint256, serialized big endian)
    public var tokenID: Data = Data()

    /// The amount of tokens being transferred (uint256, serialized big endian)
    public var value: Data = Data()

    public var data: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Generic smart contract transaction
  public struct ContractGeneric {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Amount to send in wei (uint256, serialized big endian)
    public var amount: Data = Data()

    /// Contract call payload data
    public var data: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Batched transaction for ERC-4337 wallets
  public struct Batch {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var calls: [TW_Ethereum_Proto_Transaction.Batch.BatchedCall] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct BatchedCall {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Recipient addresses.
      public var address: String = String()

      /// Amounts to send in wei (uint256, serialized big endian)
      public var amount: Data = Data()

      /// Contract call payloads data
      public var payload: Data = Data()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public init() {}
}

/// ERC-4337 structure that describes a transaction to be sent on behalf of a user
public struct TW_Ethereum_Proto_UserOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Entry point contract address
  public var entryPoint: String = String()

  /// Account factory contract address
  public var initCode: Data = Data()

  /// Account logic contract address
  public var sender: String = String()

  /// The amount of gas to pay for to compensate the bundler for pre-verification execution and calldata
  public var preVerificationGas: Data = Data()

  /// The amount of gas to allocate for the verification step
  public var verificationGasLimit: Data = Data()

  /// Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster (empty for self-sponsored transaction)
  public var paymasterAndData: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Input data necessary to create a signed transaction.
/// Legacy and EIP2718/EIP1559 transactions supported, see TransactionMode.
public struct TW_Ethereum_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Chain identifier (uint256, serialized big endian)
  public var chainID: Data {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  /// Nonce (uint256, serialized big endian)
  public var nonce: Data {
    get {return _storage._nonce}
    set {_uniqueStorage()._nonce = newValue}
  }

  /// Transaction version selector: Legacy or enveloped, has impact on fee structure.
  /// Default is Legacy (value 0)
  public var txMode: TW_Ethereum_Proto_TransactionMode {
    get {return _storage._txMode}
    set {_uniqueStorage()._txMode = newValue}
  }

  /// Gas price (uint256, serialized big endian)
  /// Relevant for legacy transactions only (disregarded for enveloped/EIP1559)
  public var gasPrice: Data {
    get {return _storage._gasPrice}
    set {_uniqueStorage()._gasPrice = newValue}
  }

  /// Gas limit (uint256, serialized big endian)
  public var gasLimit: Data {
    get {return _storage._gasLimit}
    set {_uniqueStorage()._gasLimit = newValue}
  }

  /// Maximum optional inclusion fee (aka tip) (uint256, serialized big endian)
  /// Relevant for enveloped/EIP1559 transactions only, tx_mode=Enveloped, (disregarded for legacy)
  public var maxInclusionFeePerGas: Data {
    get {return _storage._maxInclusionFeePerGas}
    set {_uniqueStorage()._maxInclusionFeePerGas = newValue}
  }

  /// Maximum fee (uint256, serialized big endian)
  /// Relevant for enveloped/EIP1559 transactions only, tx_mode=Enveloped, (disregarded for legacy)
  public var maxFeePerGas: Data {
    get {return _storage._maxFeePerGas}
    set {_uniqueStorage()._maxFeePerGas = newValue}
  }

  /// Recipient's address.
  public var toAddress: String {
    get {return _storage._toAddress}
    set {_uniqueStorage()._toAddress = newValue}
  }

  /// The secret private key used for signing (32 bytes).
  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  /// The payload transaction
  public var transaction: TW_Ethereum_Proto_Transaction {
    get {return _storage._transaction ?? TW_Ethereum_Proto_Transaction()}
    set {_uniqueStorage()._transaction = newValue}
  }
  /// Returns true if `transaction` has been explicitly set.
  public var hasTransaction: Bool {return _storage._transaction != nil}
  /// Clears the value of `transaction`. Subsequent reads from it will return its default value.
  public mutating func clearTransaction() {_uniqueStorage()._transaction = nil}

  /// UserOperation for ERC-4337 wallets
  public var userOperation: TW_Ethereum_Proto_UserOperation {
    get {return _storage._userOperation ?? TW_Ethereum_Proto_UserOperation()}
    set {_uniqueStorage()._userOperation = newValue}
  }
  /// Returns true if `userOperation` has been explicitly set.
  public var hasUserOperation: Bool {return _storage._userOperation != nil}
  /// Clears the value of `userOperation`. Subsequent reads from it will return its default value.
  public mutating func clearUserOperation() {_uniqueStorage()._userOperation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Result containing the signed and encoded transaction.
public struct TW_Ethereum_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signed and encoded transaction bytes.
  public var encoded: Data = Data()

  /// The V, R, S components of the resulting signature, (each uint256, serialized big endian)
  public var v: Data = Data()

  public var r: Data = Data()

  public var s: Data = Data()

  /// The payload part, supplied in the input or assembled from input parameters
  public var data: Data = Data()

  /// error code, 0 is ok, other codes will be treated as errors
  public var error: TW_Common_Proto_SigningError = .ok

  /// error code description
  public var errorMessage: String = String()

  /// Encoded transaction bytes.
  public var preHash: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Ethereum_Proto_MaybeChainId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Chain ID.
  public var chainID: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Ethereum_Proto_MessageSigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The secret private key used for signing (32 bytes).
  public var privateKey: Data = Data()

  /// Message to sign. Either a regular message or a typed data structured message in JSON format.
  /// Message type should be declared at `message_type`.
  public var message: String = String()

  /// Optional. Used in replay protection and to check Typed Structured Data input.
  /// Eg. should be set if `message_type` is `MessageType_eip155`, or MessageType_typed, or `MessageType_typed_eip155`.
  public var chainID: TW_Ethereum_Proto_MaybeChainId {
    get {return _chainID ?? TW_Ethereum_Proto_MaybeChainId()}
    set {_chainID = newValue}
  }
  /// Returns true if `chainID` has been explicitly set.
  public var hasChainID: Bool {return self._chainID != nil}
  /// Clears the value of `chainID`. Subsequent reads from it will return its default value.
  public mutating func clearChainID() {self._chainID = nil}

  /// Message type.
  public var messageType: TW_Ethereum_Proto_MessageType = .legacy

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _chainID: TW_Ethereum_Proto_MaybeChainId? = nil
}

public struct TW_Ethereum_Proto_MessageSigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The signature, Hex-encoded.
  public var signature: String = String()

  /// error code, 0 is ok, other codes will be treated as errors
  public var error: TW_Common_Proto_SigningError = .ok

  /// error code description
  public var errorMessage: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Ethereum_Proto_MessageVerifyingInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The message signed.
  public var message: String = String()

  /// Public key that will verify and recover the message from the signature.
  public var publicKey: Data = Data()

  /// The signature, Hex-encoded.
  public var signature: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Ethereum.Proto"

extension TW_Ethereum_Proto_TransactionMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Legacy"),
    1: .same(proto: "Enveloped"),
    2: .same(proto: "UserOp"),
  ]
}

extension TW_Ethereum_Proto_MessageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MessageType_legacy"),
    1: .same(proto: "MessageType_eip155"),
    2: .same(proto: "MessageType_typed"),
    3: .same(proto: "MessageType_typed_eip155"),
    4: .same(proto: "MessageType_immutable_x"),
  ]
}

extension TW_Ethereum_Proto_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transfer"),
    2: .standard(proto: "erc20_transfer"),
    3: .standard(proto: "erc20_approve"),
    4: .standard(proto: "erc721_transfer"),
    5: .standard(proto: "erc1155_transfer"),
    6: .standard(proto: "contract_generic"),
    7: .same(proto: "batch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: TW_Ethereum_Proto_Transaction.Transfer?
        var hadOneofValue = false
        if let current = self.transactionOneof {
          hadOneofValue = true
          if case .transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionOneof = .transfer(v)
        }
      }()
      case 2: try {
        var v: TW_Ethereum_Proto_Transaction.ERC20Transfer?
        var hadOneofValue = false
        if let current = self.transactionOneof {
          hadOneofValue = true
          if case .erc20Transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionOneof = .erc20Transfer(v)
        }
      }()
      case 3: try {
        var v: TW_Ethereum_Proto_Transaction.ERC20Approve?
        var hadOneofValue = false
        if let current = self.transactionOneof {
          hadOneofValue = true
          if case .erc20Approve(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionOneof = .erc20Approve(v)
        }
      }()
      case 4: try {
        var v: TW_Ethereum_Proto_Transaction.ERC721Transfer?
        var hadOneofValue = false
        if let current = self.transactionOneof {
          hadOneofValue = true
          if case .erc721Transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionOneof = .erc721Transfer(v)
        }
      }()
      case 5: try {
        var v: TW_Ethereum_Proto_Transaction.ERC1155Transfer?
        var hadOneofValue = false
        if let current = self.transactionOneof {
          hadOneofValue = true
          if case .erc1155Transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionOneof = .erc1155Transfer(v)
        }
      }()
      case 6: try {
        var v: TW_Ethereum_Proto_Transaction.ContractGeneric?
        var hadOneofValue = false
        if let current = self.transactionOneof {
          hadOneofValue = true
          if case .contractGeneric(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionOneof = .contractGeneric(v)
        }
      }()
      case 7: try {
        var v: TW_Ethereum_Proto_Transaction.Batch?
        var hadOneofValue = false
        if let current = self.transactionOneof {
          hadOneofValue = true
          if case .batch(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.transactionOneof = .batch(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.transactionOneof {
    case .transfer?: try {
      guard case .transfer(let v)? = self.transactionOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .erc20Transfer?: try {
      guard case .erc20Transfer(let v)? = self.transactionOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .erc20Approve?: try {
      guard case .erc20Approve(let v)? = self.transactionOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .erc721Transfer?: try {
      guard case .erc721Transfer(let v)? = self.transactionOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .erc1155Transfer?: try {
      guard case .erc1155Transfer(let v)? = self.transactionOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .contractGeneric?: try {
      guard case .contractGeneric(let v)? = self.transactionOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .batch?: try {
      guard case .batch(let v)? = self.transactionOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_Transaction, rhs: TW_Ethereum_Proto_Transaction) -> Bool {
    if lhs.transactionOneof != rhs.transactionOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_Transaction.Transfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Ethereum_Proto_Transaction.protoMessageName + ".Transfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_Transaction.Transfer, rhs: TW_Ethereum_Proto_Transaction.Transfer) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_Transaction.ERC20Transfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Ethereum_Proto_Transaction.protoMessageName + ".ERC20Transfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "to"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_Transaction.ERC20Transfer, rhs: TW_Ethereum_Proto_Transaction.ERC20Transfer) -> Bool {
    if lhs.to != rhs.to {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_Transaction.ERC20Approve: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Ethereum_Proto_Transaction.protoMessageName + ".ERC20Approve"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spender"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.spender) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spender.isEmpty {
      try visitor.visitSingularStringField(value: self.spender, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_Transaction.ERC20Approve, rhs: TW_Ethereum_Proto_Transaction.ERC20Approve) -> Bool {
    if lhs.spender != rhs.spender {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_Transaction.ERC721Transfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Ethereum_Proto_Transaction.protoMessageName + ".ERC721Transfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .standard(proto: "token_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.tokenID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if !self.tokenID.isEmpty {
      try visitor.visitSingularBytesField(value: self.tokenID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_Transaction.ERC721Transfer, rhs: TW_Ethereum_Proto_Transaction.ERC721Transfer) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_Transaction.ERC1155Transfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Ethereum_Proto_Transaction.protoMessageName + ".ERC1155Transfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .standard(proto: "token_id"),
    4: .same(proto: "value"),
    5: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.tokenID) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if !self.tokenID.isEmpty {
      try visitor.visitSingularBytesField(value: self.tokenID, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_Transaction.ERC1155Transfer, rhs: TW_Ethereum_Proto_Transaction.ERC1155Transfer) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs.value != rhs.value {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_Transaction.ContractGeneric: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Ethereum_Proto_Transaction.protoMessageName + ".ContractGeneric"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_Transaction.ContractGeneric, rhs: TW_Ethereum_Proto_Transaction.ContractGeneric) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_Transaction.Batch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Ethereum_Proto_Transaction.protoMessageName + ".Batch"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "calls"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.calls) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.calls.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.calls, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_Transaction.Batch, rhs: TW_Ethereum_Proto_Transaction.Batch) -> Bool {
    if lhs.calls != rhs.calls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_Transaction.Batch.BatchedCall: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Ethereum_Proto_Transaction.Batch.protoMessageName + ".BatchedCall"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "amount"),
    3: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_Transaction.Batch.BatchedCall, rhs: TW_Ethereum_Proto_Transaction.Batch.BatchedCall) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_UserOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserOperation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entry_point"),
    2: .standard(proto: "init_code"),
    3: .same(proto: "sender"),
    4: .standard(proto: "pre_verification_gas"),
    5: .standard(proto: "verification_gas_limit"),
    6: .standard(proto: "paymaster_and_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.entryPoint) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.initCode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.preVerificationGas) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.verificationGasLimit) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.paymasterAndData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entryPoint.isEmpty {
      try visitor.visitSingularStringField(value: self.entryPoint, fieldNumber: 1)
    }
    if !self.initCode.isEmpty {
      try visitor.visitSingularBytesField(value: self.initCode, fieldNumber: 2)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 3)
    }
    if !self.preVerificationGas.isEmpty {
      try visitor.visitSingularBytesField(value: self.preVerificationGas, fieldNumber: 4)
    }
    if !self.verificationGasLimit.isEmpty {
      try visitor.visitSingularBytesField(value: self.verificationGasLimit, fieldNumber: 5)
    }
    if !self.paymasterAndData.isEmpty {
      try visitor.visitSingularBytesField(value: self.paymasterAndData, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_UserOperation, rhs: TW_Ethereum_Proto_UserOperation) -> Bool {
    if lhs.entryPoint != rhs.entryPoint {return false}
    if lhs.initCode != rhs.initCode {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.preVerificationGas != rhs.preVerificationGas {return false}
    if lhs.verificationGasLimit != rhs.verificationGasLimit {return false}
    if lhs.paymasterAndData != rhs.paymasterAndData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "nonce"),
    3: .standard(proto: "tx_mode"),
    4: .standard(proto: "gas_price"),
    5: .standard(proto: "gas_limit"),
    6: .standard(proto: "max_inclusion_fee_per_gas"),
    7: .standard(proto: "max_fee_per_gas"),
    8: .standard(proto: "to_address"),
    9: .standard(proto: "private_key"),
    10: .same(proto: "transaction"),
    11: .standard(proto: "user_operation"),
  ]

  fileprivate class _StorageClass {
    var _chainID: Data = Data()
    var _nonce: Data = Data()
    var _txMode: TW_Ethereum_Proto_TransactionMode = .legacy
    var _gasPrice: Data = Data()
    var _gasLimit: Data = Data()
    var _maxInclusionFeePerGas: Data = Data()
    var _maxFeePerGas: Data = Data()
    var _toAddress: String = String()
    var _privateKey: Data = Data()
    var _transaction: TW_Ethereum_Proto_Transaction? = nil
    var _userOperation: TW_Ethereum_Proto_UserOperation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainID = source._chainID
      _nonce = source._nonce
      _txMode = source._txMode
      _gasPrice = source._gasPrice
      _gasLimit = source._gasLimit
      _maxInclusionFeePerGas = source._maxInclusionFeePerGas
      _maxFeePerGas = source._maxFeePerGas
      _toAddress = source._toAddress
      _privateKey = source._privateKey
      _transaction = source._transaction
      _userOperation = source._userOperation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBytesField(value: &_storage._chainID) }()
        case 2: try { try decoder.decodeSingularBytesField(value: &_storage._nonce) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._txMode) }()
        case 4: try { try decoder.decodeSingularBytesField(value: &_storage._gasPrice) }()
        case 5: try { try decoder.decodeSingularBytesField(value: &_storage._gasLimit) }()
        case 6: try { try decoder.decodeSingularBytesField(value: &_storage._maxInclusionFeePerGas) }()
        case 7: try { try decoder.decodeSingularBytesField(value: &_storage._maxFeePerGas) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._toAddress) }()
        case 9: try { try decoder.decodeSingularBytesField(value: &_storage._privateKey) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._transaction) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._userOperation) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._chainID, fieldNumber: 1)
      }
      if !_storage._nonce.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._nonce, fieldNumber: 2)
      }
      if _storage._txMode != .legacy {
        try visitor.visitSingularEnumField(value: _storage._txMode, fieldNumber: 3)
      }
      if !_storage._gasPrice.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._gasPrice, fieldNumber: 4)
      }
      if !_storage._gasLimit.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._gasLimit, fieldNumber: 5)
      }
      if !_storage._maxInclusionFeePerGas.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._maxInclusionFeePerGas, fieldNumber: 6)
      }
      if !_storage._maxFeePerGas.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._maxFeePerGas, fieldNumber: 7)
      }
      if !_storage._toAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._toAddress, fieldNumber: 8)
      }
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 9)
      }
      try { if let v = _storage._transaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._userOperation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_SigningInput, rhs: TW_Ethereum_Proto_SigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._nonce != rhs_storage._nonce {return false}
        if _storage._txMode != rhs_storage._txMode {return false}
        if _storage._gasPrice != rhs_storage._gasPrice {return false}
        if _storage._gasLimit != rhs_storage._gasLimit {return false}
        if _storage._maxInclusionFeePerGas != rhs_storage._maxInclusionFeePerGas {return false}
        if _storage._maxFeePerGas != rhs_storage._maxFeePerGas {return false}
        if _storage._toAddress != rhs_storage._toAddress {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._transaction != rhs_storage._transaction {return false}
        if _storage._userOperation != rhs_storage._userOperation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
    2: .same(proto: "v"),
    3: .same(proto: "r"),
    4: .same(proto: "s"),
    5: .same(proto: "data"),
    6: .same(proto: "error"),
    7: .standard(proto: "error_message"),
    8: .standard(proto: "pre_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.encoded) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.v) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.r) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.s) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.error) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.preHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 1)
    }
    if !self.v.isEmpty {
      try visitor.visitSingularBytesField(value: self.v, fieldNumber: 2)
    }
    if !self.r.isEmpty {
      try visitor.visitSingularBytesField(value: self.r, fieldNumber: 3)
    }
    if !self.s.isEmpty {
      try visitor.visitSingularBytesField(value: self.s, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 5)
    }
    if self.error != .ok {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 6)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 7)
    }
    if !self.preHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.preHash, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_SigningOutput, rhs: TW_Ethereum_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.v != rhs.v {return false}
    if lhs.r != rhs.r {return false}
    if lhs.s != rhs.s {return false}
    if lhs.data != rhs.data {return false}
    if lhs.error != rhs.error {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.preHash != rhs.preHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_MaybeChainId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MaybeChainId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "chain_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.chainID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.chainID != 0 {
      try visitor.visitSingularUInt64Field(value: self.chainID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_MaybeChainId, rhs: TW_Ethereum_Proto_MaybeChainId) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_MessageSigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageSigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "private_key"),
    2: .same(proto: "message"),
    3: .standard(proto: "chain_id"),
    4: .standard(proto: "message_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._chainID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.messageType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try { if let v = self._chainID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.messageType != .legacy {
      try visitor.visitSingularEnumField(value: self.messageType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_MessageSigningInput, rhs: TW_Ethereum_Proto_MessageSigningInput) -> Bool {
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.message != rhs.message {return false}
    if lhs._chainID != rhs._chainID {return false}
    if lhs.messageType != rhs.messageType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_MessageSigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageSigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .same(proto: "error"),
    3: .standard(proto: "error_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.signature) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.error) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 1)
    }
    if self.error != .ok {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 2)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_MessageSigningOutput, rhs: TW_Ethereum_Proto_MessageSigningOutput) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.error != rhs.error {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ethereum_Proto_MessageVerifyingInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageVerifyingInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .standard(proto: "public_key"),
    3: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 2)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ethereum_Proto_MessageVerifyingInput, rhs: TW_Ethereum_Proto_MessageVerifyingInput) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
