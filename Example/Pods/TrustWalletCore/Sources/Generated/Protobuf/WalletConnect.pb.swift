// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: WalletConnect.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The transaction protocol may differ from version to version.
public enum TW_WalletConnect_Proto_Protocol: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case v2 // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .v2
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .v2
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .v2: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_WalletConnect_Proto_Protocol: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_WalletConnect_Proto_Protocol] = [
    .v2,
  ]
}

#endif  // swift(>=4.2)

/// WalletConnect request method.
public enum TW_WalletConnect_Proto_Method: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0

  /// cosmos_signAmino
  case cosmosSignAmino // = 1

  /// solana_signTransaction
  case solanaSignTransaction // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .cosmosSignAmino
    case 2: self = .solanaSignTransaction
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .cosmosSignAmino: return 1
    case .solanaSignTransaction: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_WalletConnect_Proto_Method: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_WalletConnect_Proto_Method] = [
    .unknown,
    .cosmosSignAmino,
    .solanaSignTransaction,
  ]
}

#endif  // swift(>=4.2)

public struct TW_WalletConnect_Proto_ParseRequestInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A protocol version.
  public var `protocol`: TW_WalletConnect_Proto_Protocol = .v2

  /// A signing method like "cosmos_signAmino" or "eth_signTransaction".
  public var method: TW_WalletConnect_Proto_Method = .unknown

  /// Transaction payload to sign.
  /// Basically, a JSON object.
  public var payload: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_WalletConnect_Proto_ParseRequestOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// OK (=0) or other codes in case of error
  public var error: TW_Common_Proto_SigningError {
    get {return _storage._error}
    set {_uniqueStorage()._error = newValue}
  }

  /// error description in case of error
  public var errorMessage: String {
    get {return _storage._errorMessage}
    set {_uniqueStorage()._errorMessage = newValue}
  }

  /// Prepared unsigned transaction input, on the source chain. Some fields must be completed, and it has to be signed.
  public var signingInputOneof: OneOf_SigningInputOneof? {
    get {return _storage._signingInputOneof}
    set {_uniqueStorage()._signingInputOneof = newValue}
  }

  public var binance: TW_Binance_Proto_SigningInput {
    get {
      if case .binance(let v)? = _storage._signingInputOneof {return v}
      return TW_Binance_Proto_SigningInput()
    }
    set {_uniqueStorage()._signingInputOneof = .binance(newValue)}
  }

  public var solana: TW_Solana_Proto_SigningInput {
    get {
      if case .solana(let v)? = _storage._signingInputOneof {return v}
      return TW_Solana_Proto_SigningInput()
    }
    set {_uniqueStorage()._signingInputOneof = .solana(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Prepared unsigned transaction input, on the source chain. Some fields must be completed, and it has to be signed.
  public enum OneOf_SigningInputOneof: Equatable {
    case binance(TW_Binance_Proto_SigningInput)
    case solana(TW_Solana_Proto_SigningInput)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_WalletConnect_Proto_ParseRequestOutput.OneOf_SigningInputOneof, rhs: TW_WalletConnect_Proto_ParseRequestOutput.OneOf_SigningInputOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.binance, .binance): return {
        guard case .binance(let l) = lhs, case .binance(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.solana, .solana): return {
        guard case .solana(let l) = lhs, case .solana(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.WalletConnect.Proto"

extension TW_WalletConnect_Proto_Protocol: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "V2"),
  ]
}

extension TW_WalletConnect_Proto_Method: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unknown"),
    1: .same(proto: "CosmosSignAmino"),
    2: .same(proto: "SolanaSignTransaction"),
  ]
}

extension TW_WalletConnect_Proto_ParseRequestInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ParseRequestInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protocol"),
    2: .same(proto: "method"),
    3: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.`protocol`) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.method) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.payload) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.`protocol` != .v2 {
      try visitor.visitSingularEnumField(value: self.`protocol`, fieldNumber: 1)
    }
    if self.method != .unknown {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularStringField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_WalletConnect_Proto_ParseRequestInput, rhs: TW_WalletConnect_Proto_ParseRequestInput) -> Bool {
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.method != rhs.method {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_WalletConnect_Proto_ParseRequestOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ParseRequestOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .standard(proto: "error_message"),
    3: .same(proto: "binance"),
    4: .same(proto: "solana"),
  ]

  fileprivate class _StorageClass {
    var _error: TW_Common_Proto_SigningError = .ok
    var _errorMessage: String = String()
    var _signingInputOneof: TW_WalletConnect_Proto_ParseRequestOutput.OneOf_SigningInputOneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _error = source._error
      _errorMessage = source._errorMessage
      _signingInputOneof = source._signingInputOneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._error) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._errorMessage) }()
        case 3: try {
          var v: TW_Binance_Proto_SigningInput?
          var hadOneofValue = false
          if let current = _storage._signingInputOneof {
            hadOneofValue = true
            if case .binance(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._signingInputOneof = .binance(v)
          }
        }()
        case 4: try {
          var v: TW_Solana_Proto_SigningInput?
          var hadOneofValue = false
          if let current = _storage._signingInputOneof {
            hadOneofValue = true
            if case .solana(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._signingInputOneof = .solana(v)
          }
        }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._error != .ok {
        try visitor.visitSingularEnumField(value: _storage._error, fieldNumber: 1)
      }
      if !_storage._errorMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._errorMessage, fieldNumber: 2)
      }
      switch _storage._signingInputOneof {
      case .binance?: try {
        guard case .binance(let v)? = _storage._signingInputOneof else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .solana?: try {
        guard case .solana(let v)? = _storage._signingInputOneof else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_WalletConnect_Proto_ParseRequestOutput, rhs: TW_WalletConnect_Proto_ParseRequestOutput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._error != rhs_storage._error {return false}
        if _storage._errorMessage != rhs_storage._errorMessage {return false}
        if _storage._signingInputOneof != rhs_storage._signingInputOneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
