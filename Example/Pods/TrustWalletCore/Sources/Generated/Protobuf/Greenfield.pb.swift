// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Greenfield.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Transaction broadcast mode
public enum TW_Greenfield_Proto_BroadcastMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Wait for the tx to pass/fail CheckTx
  case sync // = 0

  /// Don't wait for pass/fail CheckTx; send and return tx immediately
  case async // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .sync
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .sync
    case 1: self = .async
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .sync: return 0
    case .async: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Greenfield_Proto_BroadcastMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Greenfield_Proto_BroadcastMode] = [
    .sync,
    .async,
  ]
}

#endif  // swift(>=4.2)

/// Options for transaction encoding.
/// Consider adding Json mode.
public enum TW_Greenfield_Proto_EncodingMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Protobuf-serialized (binary)
  case protobuf // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .protobuf
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .protobuf
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .protobuf: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Greenfield_Proto_EncodingMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Greenfield_Proto_EncodingMode] = [
    .protobuf,
  ]
}

#endif  // swift(>=4.2)

/// Options for transaction signing.
/// Consider adding Direct mode when it is supported.
public enum TW_Greenfield_Proto_SigningMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case eip712 // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .eip712
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .eip712
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .eip712: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Greenfield_Proto_SigningMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Greenfield_Proto_SigningMode] = [
    .eip712,
  ]
}

#endif  // swift(>=4.2)

/// A denomination and an amount
public struct TW_Greenfield_Proto_Amount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// name of the denomination
  public var denom: String = String()

  /// amount, number as string
  public var amount: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Fee incl. gas
public struct TW_Greenfield_Proto_Fee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Fee amount(s)
  public var amounts: [TW_Greenfield_Proto_Amount] = []

  /// Gas price
  public var gas: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A transaction payload message
public struct TW_Greenfield_Proto_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The payload message
  public var messageOneof: TW_Greenfield_Proto_Message.OneOf_MessageOneof? = nil

  public var sendCoinsMessage: TW_Greenfield_Proto_Message.Send {
    get {
      if case .sendCoinsMessage(let v)? = messageOneof {return v}
      return TW_Greenfield_Proto_Message.Send()
    }
    set {messageOneof = .sendCoinsMessage(newValue)}
  }

  public var bridgeTransferOut: TW_Greenfield_Proto_Message.BridgeTransferOut {
    get {
      if case .bridgeTransferOut(let v)? = messageOneof {return v}
      return TW_Greenfield_Proto_Message.BridgeTransferOut()
    }
    set {messageOneof = .bridgeTransferOut(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The payload message
  public enum OneOf_MessageOneof: Equatable {
    case sendCoinsMessage(TW_Greenfield_Proto_Message.Send)
    case bridgeTransferOut(TW_Greenfield_Proto_Message.BridgeTransferOut)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Greenfield_Proto_Message.OneOf_MessageOneof, rhs: TW_Greenfield_Proto_Message.OneOf_MessageOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.sendCoinsMessage, .sendCoinsMessage): return {
        guard case .sendCoinsMessage(let l) = lhs, case .sendCoinsMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bridgeTransferOut, .bridgeTransferOut): return {
        guard case .bridgeTransferOut(let l) = lhs, case .bridgeTransferOut(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// cosmos-sdk/MsgSend
  public struct Send {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var fromAddress: String = String()

    public var toAddress: String = String()

    public var amounts: [TW_Greenfield_Proto_Amount] = []

    /// Optional. Default `cosmos.bank.v1beta1.MsgSend`.
    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// greenfield/MsgTransferOut
  /// Used to transfer BNB Greenfield to BSC blockchain.
  public struct BridgeTransferOut {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// In most cases, `from_address` and `to_address` are equal.
    public var fromAddress: String = String()

    public var toAddress: String = String()

    public var amount: TW_Greenfield_Proto_Amount {
      get {return _amount ?? TW_Greenfield_Proto_Amount()}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    public var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    public mutating func clearAmount() {self._amount = nil}

    /// Optional. Default `greenfield.bridge.MsgTransferOut`.
    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _amount: TW_Greenfield_Proto_Amount? = nil
  }

  public init() {}
}

/// Input data necessary to create a signed transaction.
public struct TW_Greenfield_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An encoding mode.
  public var encodingMode: TW_Greenfield_Proto_EncodingMode = .protobuf

  /// A signing mode.
  public var signingMode: TW_Greenfield_Proto_SigningMode = .eip712

  /// Source account number
  public var accountNumber: UInt64 = 0

  /// ETH Chain ID (string).
  /// Must be set if `signing_mode` is Eip712.
  public var ethChainID: String = String()

  /// Cosmos Chain ID (string)
  public var cosmosChainID: String = String()

  /// Transaction fee
  public var fee: TW_Greenfield_Proto_Fee {
    get {return _fee ?? TW_Greenfield_Proto_Fee()}
    set {_fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  public var hasFee: Bool {return self._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  public mutating func clearFee() {self._fee = nil}

  /// Optional memo
  public var memo: String = String()

  /// Sequence number (account specific)
  public var sequence: UInt64 = 0

  /// The secret private key used for signing (32 bytes).
  public var privateKey: Data = Data()

  /// Message payloads.
  public var messages: [TW_Greenfield_Proto_Message] = []

  /// Broadcast mode (included in output, relevant when broadcasting)
  public var mode: TW_Greenfield_Proto_BroadcastMode = .sync

  public var publicKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fee: TW_Greenfield_Proto_Fee? = nil
}

/// Result containing the signed and encoded transaction.
public struct TW_Greenfield_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signature
  public var signature: Data = Data()

  /// Signed transaction containing protobuf encoded, Base64-encoded form (Stargate case),
  /// wrapped in a ready-to-broadcast json.
  public var serialized: String = String()

  /// signatures array json string
  public var signatureJson: String = String()

  /// error description
  public var errorMessage: String = String()

  public var error: TW_Common_Proto_SigningError = .ok

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Greenfield.Proto"

extension TW_Greenfield_Proto_BroadcastMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SYNC"),
    1: .same(proto: "ASYNC"),
  ]
}

extension TW_Greenfield_Proto_EncodingMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Protobuf"),
  ]
}

extension TW_Greenfield_Proto_SigningMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Eip712"),
  ]
}

extension TW_Greenfield_Proto_Amount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Amount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Greenfield_Proto_Amount, rhs: TW_Greenfield_Proto_Amount) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Greenfield_Proto_Fee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fee"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amounts"),
    2: .same(proto: "gas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.amounts) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.gas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amounts, fieldNumber: 1)
    }
    if self.gas != 0 {
      try visitor.visitSingularUInt64Field(value: self.gas, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Greenfield_Proto_Fee, rhs: TW_Greenfield_Proto_Fee) -> Bool {
    if lhs.amounts != rhs.amounts {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Greenfield_Proto_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "send_coins_message"),
    2: .standard(proto: "bridge_transfer_out"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: TW_Greenfield_Proto_Message.Send?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .sendCoinsMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .sendCoinsMessage(v)
        }
      }()
      case 2: try {
        var v: TW_Greenfield_Proto_Message.BridgeTransferOut?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .bridgeTransferOut(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .bridgeTransferOut(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.messageOneof {
    case .sendCoinsMessage?: try {
      guard case .sendCoinsMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .bridgeTransferOut?: try {
      guard case .bridgeTransferOut(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Greenfield_Proto_Message, rhs: TW_Greenfield_Proto_Message) -> Bool {
    if lhs.messageOneof != rhs.messageOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Greenfield_Proto_Message.Send: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Greenfield_Proto_Message.protoMessageName + ".Send"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .standard(proto: "to_address"),
    3: .same(proto: "amounts"),
    4: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fromAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.amounts) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.typePrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 2)
    }
    if !self.amounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amounts, fieldNumber: 3)
    }
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Greenfield_Proto_Message.Send, rhs: TW_Greenfield_Proto_Message.Send) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amounts != rhs.amounts {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Greenfield_Proto_Message.BridgeTransferOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Greenfield_Proto_Message.protoMessageName + ".BridgeTransferOut"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .standard(proto: "to_address"),
    3: .same(proto: "amount"),
    4: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fromAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.typePrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 2)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Greenfield_Proto_Message.BridgeTransferOut, rhs: TW_Greenfield_Proto_Message.BridgeTransferOut) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Greenfield_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "encoding_mode"),
    2: .standard(proto: "signing_mode"),
    3: .standard(proto: "account_number"),
    4: .standard(proto: "eth_chain_id"),
    5: .standard(proto: "cosmos_chain_id"),
    6: .same(proto: "fee"),
    7: .same(proto: "memo"),
    8: .same(proto: "sequence"),
    9: .standard(proto: "private_key"),
    10: .same(proto: "messages"),
    11: .same(proto: "mode"),
    12: .standard(proto: "public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.encodingMode) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.signingMode) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.accountNumber) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ethChainID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.cosmosChainID) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._fee) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.memo) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.messages) }()
      case 11: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 12: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.encodingMode != .protobuf {
      try visitor.visitSingularEnumField(value: self.encodingMode, fieldNumber: 1)
    }
    if self.signingMode != .eip712 {
      try visitor.visitSingularEnumField(value: self.signingMode, fieldNumber: 2)
    }
    if self.accountNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.accountNumber, fieldNumber: 3)
    }
    if !self.ethChainID.isEmpty {
      try visitor.visitSingularStringField(value: self.ethChainID, fieldNumber: 4)
    }
    if !self.cosmosChainID.isEmpty {
      try visitor.visitSingularStringField(value: self.cosmosChainID, fieldNumber: 5)
    }
    try { if let v = self._fee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.memo.isEmpty {
      try visitor.visitSingularStringField(value: self.memo, fieldNumber: 7)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 8)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 9)
    }
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 10)
    }
    if self.mode != .sync {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 11)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Greenfield_Proto_SigningInput, rhs: TW_Greenfield_Proto_SigningInput) -> Bool {
    if lhs.encodingMode != rhs.encodingMode {return false}
    if lhs.signingMode != rhs.signingMode {return false}
    if lhs.accountNumber != rhs.accountNumber {return false}
    if lhs.ethChainID != rhs.ethChainID {return false}
    if lhs.cosmosChainID != rhs.cosmosChainID {return false}
    if lhs._fee != rhs._fee {return false}
    if lhs.memo != rhs.memo {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.messages != rhs.messages {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Greenfield_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .same(proto: "serialized"),
    3: .standard(proto: "signature_json"),
    4: .standard(proto: "error_message"),
    5: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.serialized) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.signatureJson) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 1)
    }
    if !self.serialized.isEmpty {
      try visitor.visitSingularStringField(value: self.serialized, fieldNumber: 2)
    }
    if !self.signatureJson.isEmpty {
      try visitor.visitSingularStringField(value: self.signatureJson, fieldNumber: 3)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 4)
    }
    if self.error != .ok {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Greenfield_Proto_SigningOutput, rhs: TW_Greenfield_Proto_SigningOutput) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.serialized != rhs.serialized {return false}
    if lhs.signatureJson != rhs.signatureJson {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
